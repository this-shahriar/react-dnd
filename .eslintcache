[{"/home/shpr/Documents/dnd/src/index.js":"1","/home/shpr/Documents/dnd/src/reportWebVitals.js":"2","/home/shpr/Documents/dnd/src/App.js":"3","/home/shpr/Documents/dnd/src/store/reducers/index.js":"4","/home/shpr/Documents/dnd/src/store/reducers/postReducer.js":"5","/home/shpr/Documents/dnd/src/store/actions/index.js":"6"},{"size":946,"mtime":1608618061855,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1608527311299,"results":"9","hashOfConfig":"8"},{"size":3613,"mtime":1608639374255,"results":"10","hashOfConfig":"8"},{"size":170,"mtime":1608545379126,"results":"11","hashOfConfig":"8"},{"size":1300,"mtime":1608637299640,"results":"12","hashOfConfig":"8"},{"size":339,"mtime":1608549695725,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1g41uly",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/home/shpr/Documents/dnd/src/index.js",[],["29","30"],"/home/shpr/Documents/dnd/src/reportWebVitals.js",[],"/home/shpr/Documents/dnd/src/App.js",["31","32","33","34","35"],"import \"./App.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useRef } from \"react\";\nimport { getAllPosts } from \"./store/actions\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport { Motion, spring } from \"react-motion\";\n\nconst App = () => {\n  const state = useSelector((state) => state?.postReducer);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getAllPosts());\n  }, []);\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"row\", padding: \"4rem\" }}>\n      <DropArea data={state?.raw} raw />\n      <DropArea data={state?.processed} processed />\n    </div>\n  );\n};\n\nconst DragBox = ({ data, index, raw }) => {\n  const state = useSelector((state) => state?.postReducer);\n  const ref = useRef(null);\n  const dispatch = useDispatch();\n  const [, drop] = useDrop({\n    accept: \"card\",\n    hover(item, monitor) {\n      const dragIndex = item.index;\n      const hoverIndex = index;\n\n      const hoveredRect = ref.current.getBoundingClientRect();\n      const hoverMiddleY = (hoveredRect.bottom - hoveredRect.top) / 2;\n      const mousePosition = monitor.getClientOffset();\n      const hoverClientY = mousePosition.y - hoveredRect.top;\n\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        console.log(hoverIndex);\n        dispatch({ type: \"HOVER\", value: hoverIndex });\n      }\n\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        console.log(hoverIndex);\n        dispatch({ type: \"HOVER\", value: hoverIndex });\n      }\n      item.index = hoverIndex;\n    },\n  });\n\n  const [{ isDragging }, drag] = useDrag({\n    item: { id: data?.id, type: \"card\" },\n    collect: (monitor) => ({ isDragging: !!monitor?.isDragging() }),\n  });\n  drag(drop(ref));\n\n  useEffect(() => {\n    !isDragging && dispatch({ type: \"HOVER\", value: null });\n  }, [isDragging]);\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        marginBottom: index === state?.hoverIndex ? \"4rem\" : \"1rem \",\n        padding: \"1rem 1.2rem\",\n        border: \"2px solid #fafafa\",\n        borderRadius: \"5px\",\n        backgroundColor: \"coral\",\n        userSelect: \"none\",\n        cursor: \"pointer\",\n        boxShadow: isDragging\n          ? \"rgba(0, 0, 0, 0.25) 0px 54px 55px, rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px, rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px\"\n          : \"rgba(0, 0, 0, 0.15) 1.95px 1.95px 2.6px\",\n        opacity: isDragging ? 0.5 : 1,\n        transition: \"all 0.3s cubic-bezier(.25,.8,.25,1)\",\n      }}\n    >\n      <h5>{data?.name}</h5>\n      <button\n        style={{\n          marginTop: \"0.5rem\",\n          padding: \"0.4rem 1rem\",\n          backgroundColor: \"gold\",\n          border: 0,\n          borderRadius: \"2px\",\n        }}\n        onClick={() =>\n          dispatch({ type: raw ? \"PROCESS\" : \"TORAW\", value: data?.id })\n        }\n      >\n        {raw ? \"Process\" : \"Raw\"}\n      </button>\n    </div>\n  );\n};\n\nconst DropArea = ({ data, raw }) => {\n  const dispatch = useDispatch();\n  const [{ isOver }, drop] = useDrop({\n    accept: \"card\",\n    drop: (item, monitor) =>\n      dispatch({ type: raw ? \"TORAW\" : \"PROCESS\", value: item?.id }),\n    collect: (monitor) => ({ isOver: !!monitor?.isOver() }),\n  });\n\n  return (\n    <div\n      ref={drop}\n      style={{\n        backgroundColor: \"darkcyan\",\n        padding: \"1rem\",\n        flex: 1,\n        transition: \"all 0.3s cubic-bezier(.25,.8,.25,1)\",\n      }}\n    >\n      {data?.map((item, index) => (\n        <DragBox key={item?.id} data={item} index={index} raw={raw} />\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n","/home/shpr/Documents/dnd/src/store/reducers/index.js",[],"/home/shpr/Documents/dnd/src/store/reducers/postReducer.js",[],["36","37"],"/home/shpr/Documents/dnd/src/store/actions/index.js",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":6,"column":10,"nodeType":"44","messageId":"45","endLine":6,"endColumn":16},{"ruleId":"42","severity":1,"message":"46","line":6,"column":18,"nodeType":"44","messageId":"45","endLine":6,"endColumn":24},{"ruleId":"47","severity":1,"message":"48","line":14,"column":6,"nodeType":"49","endLine":14,"endColumn":8,"suggestions":"50"},{"ruleId":"47","severity":1,"message":"48","line":59,"column":6,"nodeType":"49","endLine":59,"endColumn":18,"suggestions":"51"},{"ruleId":"42","severity":1,"message":"52","line":100,"column":12,"nodeType":"44","messageId":"45","endLine":100,"endColumn":18},{"ruleId":"38","replacedBy":"53"},{"ruleId":"40","replacedBy":"54"},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'Motion' is defined but never used.","Identifier","unusedVar","'spring' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["57"],["58"],"'isOver' is assigned a value but never used.",["55"],["56"],"no-global-assign","no-unsafe-negation",{"desc":"59","fix":"60"},{"desc":"61","fix":"62"},"Update the dependencies array to be: [dispatch]",{"range":"63","text":"64"},"Update the dependencies array to be: [dispatch, isDragging]",{"range":"65","text":"66"},[429,431],"[dispatch]",[1839,1851],"[dispatch, isDragging]"]